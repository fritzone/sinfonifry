<%pre>
#include <tntdb.h>
#include <string>
#include <plugin_helper.h>
#include "utils_web.h"
using namespace sinfonifry;
</%pre>
<%args>
std::string hostId;
std::string hostIp;
</%args>
<html>
<head>
  <style type="text/css">
    body { font-size: 80%; font-family: 'Lucida Grande', Verdana, Arial, Sans-Serif; }
    ul#tabs { list-style-type: none; margin: 15px 0 0 0; padding: 0 0 0.3em 0; }
    ul#tabs li { display: inline; }
    ul#tabs li a { color: #42454a; background-color: #dedbde; border: 1px solid #c9c3ba; border-bottom: none; padding: 0.3em; text-decoration: none; }
    ul#tabs li a:hover { background-color: #f1f0ee; }
    ul#tabs li a.selected { color: #000; background-color: #f1f0ee; font-weight: bold; padding: 0.7em 0.3em 0.38em 0.3em; }
    div.tabContent { border: 2px solid #c9c3ba; padding: 0.5em; background-color: #f1f0ee; }
    div.tabContent.hide { display: none; }

    <!-- Here insert the styles from the plugins -->
    <%cpp>
    const std::vector<plugin_descriptor*>& web_plugins = PluginHelper::instance().getSignedPlugins();
    for(int i=0; i< web_plugins.size(); i++)
    {
        web_plugin_descriptor* wpc = static_cast<web_plugin_descriptor*>(web_plugins[i]);
        if(wpc->f_styles)
        {
            const char* styles = wpc->f_styles();
            if(styles)
            {
                reply.out() << styles;
            }
        }
    }
    </%cpp>
  </style>

  <script src="/jquery.js"></script>

  <# this below will make all the links to go through this function. #>
  <# will initiate an ajax call and put the result in the div requested #>
  <script type="text/javascript">
    $(function() {
        $("a").click(function() {
            return someMethodName($(this).attr('href'));
        });
    });

    function someMethodName(hrf)
    {
        performRequest(hrf)
        return false;
    }

    function performRequest(hrf)
    {
      // firstly remove the &sinfonifry_target=div_something from the query and store it.
      // supposedly this sinfonifry_target is written to the end
      var attr_name ="&sinfonifry_target";
      var target_div = "";
      var sfry_div_idx=hrf.indexOf(attr_name);
      if(sfry_div_idx != -1)
      {
          target_div = hrf.substring(sfry_div_idx + attr_name.length + 1);
          hrf = hrf.substring(0, sfry_div_idx );
      }
      console.log(target_div);

      var xmlhttp;
      if(window.XMLHttpRequest)
      {
          xmlhttp=new XMLHttpRequest();
      }
      else
      {
        xmlhttp=new ActiveXObject("Microsoft.XMLHTTP");
      }
      xmlhttp.onreadystatechange=function()
      {
        console.log("STATECHANGE ", xmlhttp.readyState, xmlhttp.status);

        if (xmlhttp.readyState==4 && xmlhttp.status == 200)
        {

              console.log(xmlhttp.responseText)     ;
          document.getElementById(target_div).innerHTML=xmlhttp.responseText;
        }
      }
      s=hrf;
      xmlhttp.open("GET", s, true);
      xmlhttp.send();
    }

  </script>




  <script type="text/javascript">
    //<![CDATA[

    var tabLinks = new Array();
    var contentDivs = new Array();

    function init() {

      // Grab the tab links and content divs from the page
      var tabListItems = document.getElementById('tabs').childNodes;
      for ( var i = 0; i < tabListItems.length; i++ ) {
        if ( tabListItems[i].nodeName == "LI" ) {
          var tabLink = getFirstChildWithTagName( tabListItems[i], 'A' );
          var id = getHash( tabLink.getAttribute('href') );
          tabLinks[id] = tabLink;
          contentDivs[id] = document.getElementById( id );
        }
      }

      // Assign onclick events to the tab links, and
      // highlight the first tab
      var i = 0;

      for ( var id in tabLinks ) {
        tabLinks[id].onclick = showTab;
        tabLinks[id].onfocus = function() { this.blur() };
        if ( i == 0 ) tabLinks[id].className = 'selected';
        i++;
      }

      // Hide all content divs except the first
      var i = 0;

      for ( var id in contentDivs ) {
        if ( i != 0 ) contentDivs[id].className = 'tabContent hide';
        i++;
      }
    }

    function showTab() {
      var selectedId = getHash( this.getAttribute('href') );

      // Highlight the selected tab, and dim all others.
      // Also show the selected content div, and hide all others.
      for ( var id in contentDivs ) {
        if ( id == selectedId ) {
          tabLinks[id].className = 'selected';
          contentDivs[id].className = 'tabContent';
        } else {
          tabLinks[id].className = '';
          contentDivs[id].className = 'tabContent hide';
        }
      }

      // Stop the browser following the link
      return false;
    }

    function getFirstChildWithTagName( element, tagName ) {
      for ( var i = 0; i < element.childNodes.length; i++ ) {
        if ( element.childNodes[i].nodeName == tagName ) return element.childNodes[i];
      }
    }

    function getHash( url ) {
      var hashPos = url.lastIndexOf ( '#' );
      return url.substring( hashPos + 1 );
    }

    //]]>
    <# Here insert the javascripts from the plugins #>

    <%cpp>
    for(int i=0; i< web_plugins.size(); i++)
    {
        web_plugin_descriptor* wpc = static_cast<web_plugin_descriptor*>(web_plugins[i]);
        if(wpc->f_javascripts)
        {
            const char* jscripts = wpc->f_javascripts();
            if(jscripts)
            {
                reply.out() << jscripts;
            }
        }
    }
    </%cpp>
  </script>
</head>

<body onload="init()">

    <!-- Creating the TAB for the plugins -->
    <ul id="tabs">
    <%cpp>
    for(int i=0; i< web_plugins.size(); i++)
    {
        web_plugin_descriptor* wpc = static_cast<web_plugin_descriptor*>(web_plugins[i]);
        reply.out() << "<li><a href=\"#div_" << wpc->name << "\">" <<  wpc->f_descriptive_name() << "</a></li>";
    }
    reply.out() << "</ul>";

    for(int i=0; i< web_plugins.size(); i++)
    {
        web_plugin_descriptor* wpc = static_cast<web_plugin_descriptor*>(web_plugins[i]);
        std::string div_name = std::string("div_") + wpc->name;
        reply.out() << "<div class=\"tabContent\" id=\"" << div_name << "\"><div><p>";

        // and now print the output of the web plugin
        if(wpc->f_data_request)
        {
            ALLOCATION_BEHAVIOR ab = DO_NOT_FREE_ME;
            char* s = wpc->f_data_request(&ab, hostIp.c_str(), div_name.c_str());
            std::string fixed = fix_entrypoints(std::string(s), wpc->name);
            reply.out() << fixed;

            if(ab = DELETE_ME)
            {
                delete [] s;
            }
            else
            if(ab == FREE_ME)
            {
                free(s);
            }
        }
        else
        {
            reply.out() << "no data request";
        }
        reply.out() << "</p></div></div>";
    }
    </%cpp>
  </body>

</html>
